/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.8.6231.38725 (NJsonSchema v7.7.6231.35489) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegister(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAll(): Observable<ListResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAll";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): ListResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfAuditLogListDto.fromJS(resultData200) : new ListResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    pagedResult(input: GetAuditLogsInput): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/PagedResult";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPagedResult(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPagedResult(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processPagedResult(response: Response): PagedResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id: number): Observable<AuditLogDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/Get?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<AuditLogDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): AuditLogDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogDto.fromJS(resultData200) : new AuditLogDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class ConfigurationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    changeUiTheme(input: ChangeUiThemeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangeUiTheme(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeUiTheme(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeUiTheme(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    updateRolePermissions(input: UpdateRolePermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/UpdateRolePermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateRolePermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateRolePermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateRolePermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getTenants(): Observable<ListResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenants(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenants(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTenantListDto>><any>Observable.throw(response);
        });
    }

    protected processGetTenants(response: Response): ListResultDtoOfTenantListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfTenantListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTenantListDto.fromJS(resultData200) : new ListResultDtoOfTenantListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getUsers(): Observable<ListResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsers(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserListDto>><any>Observable.throw(response);
        });
    }

    protected processGetUsers(response: Response): ListResultDtoOfUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserListDto.fromJS(resultData200) : new ListResultDtoOfUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    pagedResult(input: GetUsersInput): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/PagedResult";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPagedResult(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPagedResult(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response);
        });
    }

    protected processPagedResult(response: Response): PagedResultDtoOfUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id: number): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    prohibitPermission(input: ProhibitPermissionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ProhibitPermission";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processProhibitPermission(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processProhibitPermission(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processProhibitPermission(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetUserSpecificPermissions(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetUserSpecificPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetUserSpecificPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlock(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Unlock?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlock(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlock(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlock(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserPermissions(input: UserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input: CreateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input: UpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetPassword(input: ChangeUserPasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetPassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetPassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetPassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class IsTenantAvailableInput { 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput { 
    state: IsTenantAvailableOutputState; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    emailAddress: string; 
    password: string; 
    captchaResponse: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : null;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput { 
    canLogin: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : null;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class ListResultDtoOfAuditLogListDto { 
    items: AuditLogListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfAuditLogListDto {
        return new ListResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogListDto { 
    userId: number; 
    branchName: string; 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    executionTime: moment.Moment; 
    executionDuration: number; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    exception: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.branchName = data["branchName"] !== undefined ? data["branchName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogListDto {
        return new AuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["branchName"] = this.branchName !== undefined ? this.branchName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogListDto(JSON.parse(json));
    }
}

export class GetAuditLogsInput { 
    maxResultCount: number; 
    skipCount: number; 
    sorting: string; 
    startDate: moment.Moment; 
    endDate: moment.Moment; 
    executionDurationFrom: number; 
    executionDurationTo: number; 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    browserInfo: string; 
    hasError: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.maxResultCount = data["maxResultCount"] !== undefined ? data["maxResultCount"] : null;
            this.skipCount = data["skipCount"] !== undefined ? data["skipCount"] : null;
            this.sorting = data["sorting"] !== undefined ? data["sorting"] : null;
            this.startDate = data["startDate"] ? moment(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : null;
            this.executionDurationFrom = data["executionDurationFrom"] !== undefined ? data["executionDurationFrom"] : null;
            this.executionDurationTo = data["executionDurationTo"] !== undefined ? data["executionDurationTo"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : null;
        }
    }

    static fromJS(data: any): GetAuditLogsInput {
        return new GetAuditLogsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : null;
        data["executionDurationFrom"] = this.executionDurationFrom !== undefined ? this.executionDurationFrom : null;
        data["executionDurationTo"] = this.executionDurationTo !== undefined ? this.executionDurationTo : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetAuditLogsInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfAuditLogListDto { 
    totalCount: number; 
    items: AuditLogListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        return new PagedResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogDto { 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    parameters: string; 
    executionTime: moment.Moment; 
    executionTimeAgo: string; 
    executionDuration: number; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    exception: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.parameters = data["parameters"] !== undefined ? data["parameters"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.executionTimeAgo = data["executionTimeAgo"] !== undefined ? data["executionTimeAgo"] : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogDto {
        return new AuditLogDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["parameters"] = this.parameters !== undefined ? this.parameters : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["executionTimeAgo"] = this.executionTimeAgo !== undefined ? this.executionTimeAgo : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogDto(JSON.parse(json));
    }
}

export class ChangeUiThemeInput { 
    theme: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.theme = data["theme"] !== undefined ? data["theme"] : null;
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        return new ChangeUiThemeInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["theme"] = this.theme !== undefined ? this.theme : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUiThemeInput(JSON.parse(json));
    }
}

export class UpdateRolePermissionsInput { 
    roleId: number; 
    grantedPermissionNames: string[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateRolePermissionsInput {
        return new UpdateRolePermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateRolePermissionsInput(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput { 
    application: ApplicationInfoDto; 
    user: UserLoginInfoDto; 
    tenant: TenantLoginInfoDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : null;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : null;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : null;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["application"] = this.application ? this.application.toJS() : null;
        data["user"] = this.user ? this.user.toJS() : null;
        data["tenant"] = this.tenant ? this.tenant.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class ApplicationInfoDto { 
    version: string; 
    releaseDate: moment.Moment; 
    features: { [key: string] : boolean; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : null;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : null;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key] !== undefined ? data["features"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : null;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

export class UserLoginInfoDto { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    emailAddress: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto { 
    tenancyName: string; 
    name: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class ListResultDtoOfTenantListDto { 
    items: TenantListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTenantListDto {
        return new ListResultDtoOfTenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfTenantListDto(JSON.parse(json));
    }
}

export class TenantListDto { 
    tenancyName: string; 
    name: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantListDto {
        return new TenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantListDto(JSON.parse(json));
    }
}

export class CreateTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
        }
    }

    static fromJS(data: any): CreateTenantInput {
        return new CreateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantInput(JSON.parse(json));
    }
}

export class AuthenticateModel { 
    userNameOrEmailAddress: string; 
    password: string; 
    rememberClient: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : null;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel { 
    name: string; 
    clientId: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : null;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel { 
    authProvider: string; 
    providerKey: string; 
    providerAccessCode: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : null;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    waitingForActivation: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

export class ListResultDtoOfUserListDto { 
    items: UserListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserListDto {
        return new ListResultDtoOfUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfUserListDto(JSON.parse(json));
    }
}

export class UserListDto { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    fullName: string; 
    emailAddress: string; 
    isEmailConfirmed: boolean; 
    lastLoginTime: moment.Moment; 
    isActive: boolean; 
    isLockoutEnabled: boolean; 
    isAdmin: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isLockoutEnabled = data["isLockoutEnabled"] !== undefined ? data["isLockoutEnabled"] : null;
            this.isAdmin = data["isAdmin"] !== undefined ? data["isAdmin"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserListDto {
        return new UserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isLockoutEnabled"] = this.isLockoutEnabled !== undefined ? this.isLockoutEnabled : null;
        data["isAdmin"] = this.isAdmin !== undefined ? this.isAdmin : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListDto(JSON.parse(json));
    }
}

export class GetUsersInput { 
    maxResultCount: number; 
    skipCount: number; 
    sorting: string; 
    searchString: string; 
    permissionNames: string[]; 
    roleIds: number[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.maxResultCount = data["maxResultCount"] !== undefined ? data["maxResultCount"] : null;
            this.skipCount = data["skipCount"] !== undefined ? data["skipCount"] : null;
            this.sorting = data["sorting"] !== undefined ? data["sorting"] : null;
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            if (data["permissionNames"] && data["permissionNames"].constructor === Array) {
                this.permissionNames = [];
                for (let item of data["permissionNames"])
                    this.permissionNames.push(item);
            }
            if (data["roleIds"] && data["roleIds"].constructor === Array) {
                this.roleIds = [];
                for (let item of data["roleIds"])
                    this.roleIds.push(item);
            }
        }
    }

    static fromJS(data: any): GetUsersInput {
        return new GetUsersInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : null;
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        if (this.permissionNames && this.permissionNames.constructor === Array) {
            data["permissionNames"] = [];
            for (let item of this.permissionNames)
                data["permissionNames"].push(item);
        }
        if (this.roleIds && this.roleIds.constructor === Array) {
            data["roleIds"] = [];
            for (let item of this.roleIds)
                data["roleIds"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUsersInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfUserListDto { 
    totalCount: number; 
    items: UserListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        return new PagedResultDtoOfUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfUserListDto(JSON.parse(json));
    }
}

export class UserDto { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    fullName: string; 
    emailAddress: string; 
    isEmailConfirmed: boolean; 
    lastLoginTime: moment.Moment; 
    isActive: boolean; 
    isLockoutEnabled: boolean; 
    creationTime: moment.Moment; 
    roles: UserRole[]; 
    permissions: UserPermissionSetting[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isLockoutEnabled = data["isLockoutEnabled"] !== undefined ? data["isLockoutEnabled"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRole.fromJS(item));
            }
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(UserPermissionSetting.fromJS(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserDto {
        return new UserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isLockoutEnabled"] = this.isLockoutEnabled !== undefined ? this.isLockoutEnabled : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserDto(JSON.parse(json));
    }
}

export class UserRole { 
    tenantId: number; 
    userId: number; 
    roleId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserRole {
        return new UserRole(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserRole(JSON.parse(json));
    }
}

export class UserPermissionSetting { 
    userId: number; 
    tenantId: number; 
    name: string; 
    isGranted: boolean; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.isGranted = data["isGranted"] !== undefined ? data["isGranted"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserPermissionSetting {
        return new UserPermissionSetting(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["isGranted"] = this.isGranted !== undefined ? this.isGranted : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserPermissionSetting(JSON.parse(json));
    }
}

export class ProhibitPermissionInput { 
    userId: number; 
    permissionName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.permissionName = data["permissionName"] !== undefined ? data["permissionName"] : null;
        }
    }

    static fromJS(data: any): ProhibitPermissionInput {
        return new ProhibitPermissionInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["permissionName"] = this.permissionName !== undefined ? this.permissionName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProhibitPermissionInput(JSON.parse(json));
    }
}

export class UserPermissionsInput { 
    id: number; 
    grantedPermissionNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UserPermissionsInput {
        return new UserPermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserPermissionsInput(JSON.parse(json));
    }
}

export class CreateUserInput { 
    userName: string; 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    phoneNumber: string; 
    password: string; 
    isActive: boolean; 
    roleNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateUserInput {
        return new CreateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateUserInput(JSON.parse(json));
    }
}

export class UpdateUserInput { 
    id: number; 
    userName: string; 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    phoneNumber: string; 
    isActive: boolean; 
    roleNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserInput {
        return new UpdateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserInput(JSON.parse(json));
    }
}

export class ChangeUserPasswordInput { 
    id: number; 
    password: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    static fromJS(data: any): ChangeUserPasswordInput {
        return new ChangeUserPasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUserPasswordInput(JSON.parse(json));
    }
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result?: any; 

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}